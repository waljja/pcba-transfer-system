<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ht.mapper.PcbaInventoryMapper">

	<resultMap type="com.ht.vo.SendRecDataVo" id="SenDRecData"></resultMap>
	<resultMap type="com.ht.vo.PCBAInventoryDataVo" id="PCBAInventory"></resultMap>
	<resultMap type="com.ht.vo.TotalVo" id="TotalVo"></resultMap>
	<resultMap type="com.ht.vo.SapClosingTime" id="SapClosingTime"></resultMap>
	
	<select id="specialPn" parameterType="String" resultType="String">
		select top 1 1 from [DL_SpecialPartNumber] where PartNumber = #{PN}
	</select>
	
	<update id="retryPosting" parameterType="String">
		update xTend_MaterialTransactionsSummary set TransactionResult = '0' where BatchId = #{BatchId} and ItemId = #{ItemId} and TransactionResult = '2'
	</update>

	<select id="GetBatchId" parameterType="String" resultType="java.util.HashMap">
			select top 1 TMTS.BatchId,TMTS.ItemId from xTend_MaterialTransactions TMT left join xTend_MaterialTransactionsGroup TMTG 
			on TMT.TransactionHistoryId = TMTG.TransactionHistoryId left join xTend_MaterialTransactionsSummary TMTS
		    on TMTG.BatchId = TMTS.BatchId and TMTG.ItemId = TMTS.ItemId left join xTend_MaterialTxnLog TMTL
			on lower(TMTS.BatchId) = lower(TMTL.BatchId) and TMTS.ItemId = TMTL.ItemId
			where UID = #{Lot} and TMT.TransactionType = #{Type} and TMTS.TransactionResult = 2
	</select>

	<select id="PCBAInventoryData" resultType="java.util.HashMap">
		select WO as wo,WOQuantity as woquantity,
		(select sum(AvailableQuantity ) from DL_PCBAInventory where WO = A.WO and State =1 group by WO)as inventoryQyt,(select sum(AvailableQuantity ) from DL_PCBAInventory where WO = A.WO and (State =0 or State =1) group by WO)as storageQyt,
		PartNumber as partnumber,Location as location,AvailableQuantity as availablequantity,AvailableBatch as uid,plant,(CASE WHEN workcenter = '1' THEN 'SMT'WHEN workcenter = '2' THEN 'COB'WHEN workcenter = '3' THEN 'MI'WHEN workcenter = '4' THEN 'Casing' ELSE '' END)as workcenter,CreateUser as createuser,CreateTime as createtime from [DL_PCBAInventory] A
		where State =1 
		<if test="plant1 != null and plant1.size()!=0 ">
		and plant in
		<foreach collection="plant1" item="plant1" index="index" open="(" close=")" separator=",">
			#{plant1}
		</foreach>
		</if>
		<if test="workcenter1 != null and workcenter1.size()!=0 ">
			and workcenter in
			<foreach collection="workcenter1" item="workcenter1" index="index" open="(" close=")" separator=",">
				#{workcenter1}
			</foreach>
		</if>
		<if test="wo1 != null and wo1.size()!=0 ">
			and WO in
			<foreach collection="wo1" item="wo1" index="index" open="(" close=")" separator=",">
				#{wo1}
			</foreach>
		</if>
		<if test="partnumber1 != null and partnumber1.size()!=0 ">
			and PartNumber in
			<foreach collection="partnumber1" item="partnumber1" index="index" open="(" close=")" separator=",">
				#{partnumber1}
			</foreach>
		</if>
		order by createtime desc
 		OFFSET ((#{pageIndex}-1)*#{pageSize}) ROW FETCH NEXT #{pageSize} rows only
	</select>
		
	<select id="UidState" parameterType="String" resultType="String">
		select top 1 State from DL_PCBAInventory where 1=1 and UID = #{Lot}
	</select>
	
	<select id="SapSuspended"  resultMap="SapClosingTime">
		select top 1 StartTime,EndTime from [SAP_Non_Clearing_Time_Setting] where DeleteSign!=1 order by CreateDate desc
	</select>

	<!-- 公用sql -->
	<!-- 过账表处理 -->
	<select id="RxCobData" parameterType="String" resultMap="SenDRecData">
		SELECT top 1 A.UID AS 'UID',A.PartNumber AS 'Pn',A.Quantity AS 'Qty',A.FromStock as sendLocation,A.ToStock AS 'RecLocation',A.Plant AS 'Factory',A.PO_NUMBER AS 'Wo',D.SAPREF_DOC AS 'REF_DOC',D.SAPREF_YEAR AS 'REF_DOC_YR' FROM xTend_MaterialTransactions A
		LEFT JOIN xTend_MaterialTransactionsGroup B ON A.TransactionHistoryId = B.TransactionHistoryId
		LEFT JOIN xTend_MaterialTransactionsSummary C ON B.BatchId = C.BatchId AND B.ItemId = C.ItemId
		LEFT JOIN xTend_MaterialTxnLog D ON  lower(C.BatchId) =  lower(D.BatchId) AND C.ItemId = D.ItemId
		WHERE A.UID = #{Lot} AND A.TransactionType = #{Type} AND
		      (
		      	D.Result = 'S'
		        OR D.Message like '%is already being processed by%'
		      ) ORDER BY A.TransactionTime DESC
	</select>
		
	<select id="Off_RxCobData" parameterType="String" resultMap="SenDRecData">
		SELECT top 1 A.UID AS 'UID',A.PartNumber AS 'Pn',A.Quantity AS 'Qty',A.FromStock as sendLocation,A.ToStock AS 'RecLocation',A.Plant AS 'Factory',A.PO_NUMBER AS 'Wo',D.SAPREF_DOC AS 'REF_DOC',D.SAPREF_YEAR AS 'REF_DOC_YR' FROM xTend_MaterialTransactions A
		LEFT JOIN xTend_MaterialTransactionsGroup B ON A.TransactionHistoryId = B.TransactionHistoryId
		LEFT JOIN xTend_MaterialTransactionsSummary C ON B.BatchId = C.BatchId AND B.ItemId = C.ItemId
		LEFT JOIN xTend_MaterialTxnLog D ON  lower(C.BatchId) =  lower(D.BatchId) AND C.ItemId = D.ItemId
		WHERE A.UID = #{Lot} AND A.TransactionType = #{Type}  ORDER BY A.TransactionTime DESC
	</select>
		
	<insert id="RxCobplugin315">
		IF NOT EXISTS
		(SELECT * FROM xTend_MaterialTransactions WHERE UID = #{UID} AND TransactionType='315')
		BEGIN
	 	INSERT INTO [xTend_MaterialTransactions]
		([TransactionHistoryId],[PartNumber],[UID],[Quantity],[FromStock],[ToStock],[TransactionUser],[TransactionTime],[RecordStatus],[TransactionType],[RFCTemplateID],[Plant],[PO_NUMBER],RefDocNo,DocHeader,ERPFromStock,ERPToStock)
		VALUES
		(NEWID(),#{pn},#{UID},#{Qty},#{sendLocation},#{RecLocation},#{User},GETDATE(),'0','315','Z_AEGIS_GOODSMVT_TRANSFER',#{Factory},#{Wo},#{REF_DOC},#{REF_DOC_YR},#{sendLocation},#{RecLocation})
		END
	</insert>
	<!--  过账表处理  -->
	<!--  发料先进先出  -->
	<!--  根据型号和工厂查出在库的工单号，然后根据工单号再按批次号大小排序  -->
	<!--  查找下一按顺序应该发料的Lot信息  -->
	<!--  先查出该型号在库工单的所有记录（包括State为0、1、2、3） -->
	<!--  再查找所有在库工单，所有批次中，绑库时间最早的工单号  -->
	<!--  然后绑库最早的工单号按批次排序  -->
	<select id="PcbaFIFO" parameterType="String" resultMap="SenDRecData">
		if OBJECT_ID('tempdb..##t1') is not null drop table ##t1
		select *
		into
		    ##t1
		from
		    DL_PCBAInventory
		where
		   WO in (select distinct WO from DL_PCBAInventory where State = 1 and PartNumber like UPPER('%'+#{Lot}+'%') and plant = #{Plant})

		select TOP 1
		   UID,AvailableBatch as Batch,PartNumber as Pn,Location,CreateTime,State
		from
		   DL_PCBAInventory
		where
		   WO in (select TOP 1 WO from ##t1 order by CreateTime)
		and
		   State = 1
		group by
		   UID,AvailableBatch,PartNumber,Location,CreateTime,State
		order by
		   cast(AvailableBatch as int)
	</select>
	<select id="FuzzyPn" parameterType="String" resultType="java.util.HashMap">
	select PartNumber from [DL_PCBAInventory] where PartNumber like UPPER('%'+#{Pn}+'%') and State = 1 and plant = #{plant} and workcenter = #{workcenter} group by PartNumber
	</select>
	<!-- 发料先进先出 -->
	<!-- 查询收发料信息 -->
	<select id="SelFactory" parameterType="String" resultMap="SenDRecData">
		select top 1 UID,WO as Wo,PartNumber as Pn,Factory as Factory,AvailableBatch as Batch,AvailableQuantity as
		Qty from [DL_PCBAInventory]
		where 1=1 
		
		<if test="Lot.length()==12">
			and WO = #{Lot} 
		</if>
		<if test="Lot.length()!=12">
			and UID = #{Lot} 
		</if>
		<if test="model != null and model != ''" >
   			and State = #{model} 
		</if>
		
		order by cast(AvailableBatch as int) DESC
	</select>
	<!-- 查询SMT收发料信息 -->
	<!--无条码工单批次数量获取-->
	<!--<select id="QRYSmtDataNo" parameterType="String" resultMap="SenDRecData">
	   select
	      distinct A.MO as 'Wo',A.MOQty as 'WoQty',B.MaterialName as
	                   'Pn',A.LotQty as 'Qty',A.NewSN as
	                   'UID',A.Lot as Batch,A.WERKS as 'Factory' from
	      [HT_GenericTester].[PP_SMTFIFOPrint] A
	      left join
	      [HT_FactoryLogix].[xTend_SMTFIFOPrintHistory] B
	   on A.NewSN =
	      B.NewSN collate Chinese_PRC_CI_AS
	   where A.NewSN = #{Lot}
	</select>-->
	<!-- 查询SMT收发料信息 -->
	<!-- 有条码工单批次数量获取 -->
	<!--<select id="QRYSmtData" parameterType="String" resultMap="SenDRecData">
	   select
	   distinct A.MO as 'Wo',A.MOQty as 'WoQty',B.MaterialName as
	   'Pn',(select count(*) from [HT_GenericTester].[PP_SMTFIFOPrint] where NewSN =  #{Lot} and (IsScrap is null or IsScrap != 1) ) as 'Qty',A.NewSN as
	   'UID',A.Lot as Batch,A.WERKS as 'Factory' from
	   [HT_GenericTester].[PP_SMTFIFOPrint] A
	   left join
	   [HT_FactoryLogix].[xTend_SMTFIFOPrintHistory] B
	   on A.NewSN =
	   B.NewSN collate Chinese_PRC_CI_AS
	   where A.NewSN = #{Lot}
	</select>-->
	<!-- 查询SMT批次数据 -->
	<!--<select id="QRYSmtDataMap" parameterType="String" resultType="java.util.HashMap">
		select
	    A.MO as 'Wo',A.MOQty as 'WoQty',B.MaterialName as
		'Pn',A.LotQty as 'Qty',A.NewSN as
		'UID',A.WERKS as 'Factory',A.SN from
		[HT_GenericTester].[PP_SMTFIFOPrint] A
		left join
		[HT_FactoryLogix].[xTend_SMTFIFOPrintHistory] B
		on A.NewSN =
		B.NewSN collate Chinese_PRC_CI_AS
		where A.NewSN = #{Lot}
	</select>-->
	<!-- 查询SMT批次数据 -->
	<!-- 插入PCBA板到库存 -->
	<insert id="PcbaStorage">
		INSERT INTO [DL_PCBAInventory]
		(ID,WO,WOQuantity,PartNumber,Location,State,AvailableQuantity,AvailableBatch,CreateUser,CreateTime,workcenter,Factory,UID,plant)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{Pn},#{sendLocation},'1',#{Qty},#{Batch},#{User},getdate(),#{workcenter},#{Factory},#{UID},#{Plant})
	</insert>
	<!-- 插入PCBA板到库存 -->
	<!-- 更新批次库存状态 -->
	<update id="InventoryStatus" parameterType="String">
		UPDATE [DL_PCBAInventory]
		<set>
		<if test="model==0">
			[313_Status] = '已发送',
		</if>
		State = #{model}
		</set>  
		WHERE
		UID = #{Lot} AND State = 1
	</update>
	<!-- 更新批次库存状态 -->
	<!-- 查询Pcba库存表 -->
	<select id="BatchData" parameterType="String" resultMap="SenDRecData">
  		 select distinct top 1 A.WO as 'Wo',A.WOQuantity as 'WoQty',A.PartNumber as 'Pn',A.AvailableQuantity as 'Qty',A.AvailableBatch as 'Batch',Factory,(CASE WHEN workcenter = '1' THEN (select ToStock from xTend_MaterialTransactions where UID = #{Lot} and TransactionType = '101')  ELSE Location END)  as 'sendLocation',UID
  		,(select SUM(AvailableQuantity) from [DL_PCBAInventory] where WO = #{Wo} and State = 0) AS 'workcenter' from [DL_PCBAInventory] A
		where A.UID = #{Lot} and State = 0
	</select>
	<!-- 查询Pcba库存表 -->
	<!-- 101入库 -->
	<insert id="SendSmtplugin101">
		IF NOT EXISTS  
			(SELECT * FROM xTend_MaterialTransactions WHERE UID = #{UID} AND TransactionType='101')
		BEGIN
		 INSERT INTO [xTend_MaterialTransactions]
				([TransactionHistoryId],[PartNumber],[UID],[Quantity],[ToStock],[TransactionUser],[TransactionTime],[RecordStatus],[TransactionType],[RFCTemplateID],[Plant],[PO_NUMBER],ERPToStock)
				VALUES
				(NEWID(),#{Pn},#{UID},#{Qty},#{sendLocation},#{User},GETDATE(),'0','101','Z_AEGIS_GOODSMVT_GR',#{Factory},#{Wo},#{sendLocation})
		END
	</insert>
	<!-- 101入库 -->
	
	<insert id="InsertSN" parameterType="String">
		INSERT INTO [DL_Lot-SN]
		(ID,SN,Lot,LotQty,WO,WERKS,CreateUser,CreateTime)
		VALUES
		(NEWID(),#{Sn},#{Lot},#{LotQty},#{WO},#{WERKS},#{CreateUser},GETDATE())
	</insert>
	<!-- 查询批号是否在库存中 -->
	<select id="InventoryState" parameterType="String" resultType="String">
		SELECT TOP 1 1 AS 'all' FROM [DL_PCBAInventory] WHERE UID = #{Lot} AND State = 1
	</select>
	<!-- 查询批号是否在库存中 -->
	<!-- 发料存入过账表 -->
	<insert id="SendSmtplugin313">
		IF NOT EXISTS  
			(SELECT * FROM xTend_MaterialTransactions WHERE UID = #{UID} AND TransactionType='313')
		BEGIN
		 INSERT INTO [xTend_MaterialTransactions]
				([TransactionHistoryId],[PartNumber],[UID],[Quantity],[FromStock],[ToStock],[TransactionUser],[TransactionTime],[RecordStatus],[TransactionType],[RFCTemplateID],[Plant],[PO_NUMBER],ERPFromStock,ERPToStock)
				VALUES
				(NEWID(),#{pn},#{UID},#{Qty},#{sendLocation},#{RecLocation},#{User},GETDATE(),'0','313','Z_AEGIS_GOODSMVT_TRANSFER',#{Factory},#{Wo},#{sendLocation},#{RecLocation})
		END
	</insert>
	<!-- 发料存入过账表 -->
	<!-- 公用sql -->
	<!-- SMT -->
	<!-- 存入Smt发料表 -->
	<insert id="SendSmtInsert">
		INSERT INTO [DL_PCBASMT]
		(ID,[WO],[WOQTY],[PartNumber],[Status],[SendingBatch],[SendingBatchQTY],[SendLocation],[SendingUser],[SendingTime],[TotalSentQTY],[CreateUser],[CreateTime],UID)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{pn},1,#{Batch},#{Qty},#{sendLocation},#{User},GETDATE(),#{workcenter},#{User},GETDATE(),#{UID})
	</insert>
	<!-- 存入Smt发料表 -->
	<!-- SMT -->
	
	<!-- COB -->
	<!-- COB收料 -->
	<update id="RxSmtInsert315" >
		UPDATE [DL_PCBASMT] set ReceiveBatch = #{Batch},RecLocation = #{RecLocation},ReceiveUser = #{User},ReceiveBatchQTY = #{Qty},Status = '2',ReceiveTime = GETDATE()
  		WHERE UID = #{UID} AND Status = 1
	</update>
		
		<!-- 存入Cob发料表 -->
	<insert id="SendCobInsert">
		INSERT INTO [DL_PCBACOB]
		(ID,[WO],[WOQTY],[PartNumber],[Status],[SendingBatch],[SendingBatchQTY],[SendLocation],[SendingUser],[SendingTime],[TotalSentQTY],[CreateUser],[CreateTime],UID)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{pn},1,#{Batch},#{Qty},#{sendLocation},#{User},GETDATE(),#{workcenter},#{User},GETDATE(),#{UID})
	</insert>
	<!-- 存入Cob发料表 -->
	<!-- COB收料 -->
	<!-- COB -->
	<!-- MI收料 -->
		<update id="RxCobInsert315" >
			UPDATE [DL_PCBACOB] set ReceiveBatch = #{Batch},RecLocation = #{RecLocation},ReceiveUser = #{User},ReceiveBatchQTY = #{Qty},Status = '2',ReceiveTime = GETDATE()
  			WHERE UID = #{UID} AND Status = 1
		</update>
	<!-- 存入Cob发料表 -->
	<insert id="SendMiInsert">
		INSERT INTO [DL_PCBAMI]
		(ID,[WO],[WOQTY],[PartNumber],[Status],[SendingBatch],[SendingBatchQTY],[SendLocation],[SendingUser],[SendingTime],[TotalSentQTY],[CreateUser],[CreateTime],UID)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{pn},1,#{Batch},#{Qty},#{sendLocation},#{User},GETDATE(),#{workcenter},#{User},GETDATE(),#{UID})
	</insert>
	<insert id="SendMiInsertSpecial">
		INSERT INTO [DL_PCBAMI]
		(ID,[WO],[WOQTY],[PartNumber],[Status],[SendingBatch],[SendingBatchQTY],[SendLocation],[SendingUser],[SendingTime],[TotalSentQTY],[CreateUser],[CreateTime],UID,ReceiveBatch,RecLocation,ReceiveUser,ReceiveBatchQTY,ReceiveTime)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{pn},2,#{Batch},#{Qty},#{sendLocation},#{User},GETDATE(),#{workcenter},#{User},GETDATE(),#{UID},#{Batch},#{RecLocation},#{User},#{Qty},GETDATE())
	</insert>
	<!-- 插入PCBA板到库存 -->
	<insert id="PcbaStorageSpecial">
		INSERT INTO [DL_PCBAInventory]
		(ID,WO,WOQuantity,PartNumber,Location,State,AvailableQuantity,AvailableBatch,CreateUser,CreateTime,workcenter,Factory,UID,plant)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{Pn},#{sendLocation},'0',#{Qty},#{Batch},#{User},getdate(),#{workcenter},#{Factory},#{UID},#{Plant})
	</insert>
	<!-- MI收料 -->
	<!-- Casing收料 -->
	<update id="RxMiInsert315" >
		UPDATE [DL_PCBAMI] set ReceiveBatch = #{Batch},RecLocation = #{RecLocation},ReceiveUser = #{User},ReceiveBatchQTY = #{Qty},Status = '2',ReceiveTime = GETDATE()
  		WHERE UID = #{UID} AND Status = 1
	</update>

	<update id="UpStatus">
		UPDATE [DL_PCBAInventory] set [315_Status] = '已接收'
  		WHERE UID = #{UID} AND [State] = 0
	</update>
	<insert id="SendCasingInsert">
		INSERT INTO [DL_PCBACasing]
		(ID,[WO],[WOQTY],[PartNumber],[Status],[SendingBatch],[SendingBatchQTY],[SendLocation],[SendingUser],[SendingTime],[TotalSentQTY],[CreateUser],[CreateTime],UID)
		VALUES
		(NEWID(),#{Wo},#{WoQty},#{pn},1,#{Batch},#{Qty},#{sendLocation},#{User},GETDATE(),#{workcenter},#{User},GETDATE(),#{UID})
	</insert>		
	<!-- Casing收料 -->
	<select id="Total" resultMap="TotalVo">
		if object_id(N'tempdb..#t1',N'U') is not null
 		DROP Table #t1
			if object_id(N'tempdb..#t2',N'U') is not null
 		DROP Table #t2
			if object_id(N'tempdb..#t3',N'U') is not null
 		DROP Table #t3
			if object_id(N'tempdb..#t4',N'U') is not null
 		DROP Table #t4
 		select COUNT(*) as total into #t1 from [DL_PCBAInventory] where State =1
 		select COUNT(*) as smttotal into #t2 from [DL_PCBAInventory] where  State =1 and workcenter =1
 		select COUNT(*) as cobtotal into #t3 from [DL_PCBAInventory] where  State =1 and workcenter =2
 		select COUNT(*) as mitotal into #t4 from [DL_PCBAInventory] where  State =1 and workcenter =3
 		select * from #t1,#t2,#t3,#t4
	</select>
</mapper>